package BinaryTree;

/**
 * 解题过程中的二叉树一般有两种： 满二叉树  和   完全二叉树
 * 1、满二叉树：一棵二叉树只有度为0和度为2的节点，且度为0的节点在同一层上(度为 k 的二叉树节点数为 2^k-1)
 * 2、完全二叉树：除了最后一层的节点未填满后，其余层节点都是满的，并且最后一层节点分布在最左侧
 * <p>
 * 满二叉树 和 完全二叉树 都是无数值的二叉树，二叉搜索树 是带有数值的、有序的二叉树：
 * - 若它的左子树不空，则左子树的值都小于根节点的数值
 * - 若它的右子树不空，则右子树的值都大于根节点的数值
 * - 它的左右子树也分别是一颗二叉有序树
 * <p>
 * 平衡二叉搜索树 是二叉搜索树的一种特殊形式，它有如下的性质：
 * - 它可能是一棵空树
 * - 它的左右子树的高度差不大于1
 * - 它的左右子树都是一棵平衡二叉树
 * <p>
 * 二叉树可以用 链表 和 数组 来存储，如果用数组来存储，一个父亲节点 i 的左孩子节点下标为 2*i+1，右孩子节点下标为 2*i+2
 * <p>
 * 二叉树主要有两种遍历方式： 深度优先遍历：先往深走，遇到叶子节点再往回走 （先序、中序、后序遍历 -> 先中后代表父亲节点的位置）
 * 广度优先遍历：一层一层的去遍历 （层次遍历）
 */
public class BinaryTree {
    int val;
    BinaryTree left;
    BinaryTree right;

    BinaryTree() {
    }

    BinaryTree(int val) {
        this.val = val;
    }

    BinaryTree(int val, BinaryTree left, BinaryTree right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
